package com.codenjoy.dojo.services;

/**
 * Каждый инстанс игры для каждого игрока реализует этот интерфейс
 */
public interface Game extends Tickable {

    /**
     * @return Джойстик для управления ботом игрока
     */
    Joystick getJoystick();

    /**
     * @return Максимально количество полезных действий, которое удалось совершить игроком между двух смертей
     */
    int getMaxScore();

    /**
     * @return Текущее количество полезных действий, которое удалось совершить игроком между двух смертей
     */
    int getCurrentScore();

    /**
     * @return true - если герой убит
     */
    boolean isGameOver();

    /**
     * Если герой убит, то в слудеющий такт фреймворк дернет за этот метод, чтобы создать новую игру для игрока.
     * То же происходит же при регистрации нового игрока.
     */
    void newGame();

    /**
     * Board =
     * "******" +
     * "*    *" +
     * "* ☺  *" +
     * "*    *" +
     * "*    *" +
     * "******";
     * @return строковое представление квадратной доски
     */
    String getBoardAsString();

    /**
     * Если вдруг пользователь передумает играть и уйдет, от при выходе из игры фреймворк дернет этот метод.
     * Мало ли, вдруг ты хранишь всех игроков у себя (актуально для игры типа много игроков на одном поле).
     */
    void destroy();

    /**
     * Иногда ведущий игры сбрасывает очки участников. Тогда фреймворк дернет этот метод.
     */
    void clearScore();

    /**
     * @return Координаты игрока на поле из рассчета, что [0, 0] находится в левом нижнем углу
     */
    Point getHero();
}
